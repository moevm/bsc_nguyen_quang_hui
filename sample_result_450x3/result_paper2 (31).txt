Article name: 
	 Разработка приложения по генерации формализованных требований к информационной системе
Parts:
	len(277): Описание требований и построение ER-диаграмм – процессы, которых нельзя избежать, при создании информационной системы. С появлением современных технологий, таких как обработка естественного языка и машинное обучение, появились возможности для автоматизации упомянутых действий.
	len(412): В документе описан процесс создания веб-приложения, которое позволяет пользователю генерировать формализованные требования к системе, и ее ER-диаграмму на основе неформального описания системы. В качестве основного результата представлена архитектура решения и возможности использования бесплатных компонентов и модулей. Существующие подходы и программное обеспечение для решения обсуждаемых задач также описаны.
	len(651): Задача полной автоматизации создания информационных систем с давних времен интересует разработчиков [11]. Одними из этапов разработки системы являются определение требований к ней, а также проектирование базы данных системы. В данной статье рассматриваются подходы к решению задач, встающих перед приложением, создаваемым с целью автоматизации данных процессов. На основе рассмотренных подходов предлагается архитектура веб-приложения, позволяющего сформировать формализованные требования к системе, на основе описания создаваемой системы пользователем. Также рассматривается построение возможной базы данных системы при помощи генерации ER-диаграммы.
	len(315): Основными задачами при разработке рассматриваемого приложения являются задачи классификации требований и генерации ER-диаграммы по тексту, поэтому основной акцент в статье сделан на них. При решении данных задач активно используются такие технологии как обработка естественного языка (NLP) и машинное обучение (ML).
	len(193): Методы классификации требований выбирались на основе количества цитирований статей, связанных с данным методом. Далее для сравнения были отобраны методы, протестированные на одном датасете [9].
	len(403): дискретных данных, таких как текстовые корпуса. LDA - это трехуровневая иерархическая байесовская модель, в которой каждый элемент коллекции моделируется как конечная смесь по основному набору тем. Каждая тема в свою очередь моделируется как бесконечная смесь по основному набору вероятностей тем [8]. Данный алгоритм зарекомендовал себя в кластеризации коротких текстов, например, таких как твиты [10].
	len(362): BTM моделирует темы на основе шаблонов совпадения слов и изучает темы, изучая слово-слово паттерны. Некоторые недавние исследования по применению тематического моделирования при классификации кратких текстовых документов установили, что подход BTM обладает лучшими способностями в моделировании кратких и разреженных текстов, типичных для технических требований.
	len(383): Иерархический (т.е. агломерационный) алгоритм сначала присваивает каждый документ своему кластеру и итеративно объединяет кластеры, которые находятся ближе всего друг к другу, до тех пор, пока весь корпус не образует единый кластер. Структура, получаемая в результате работы алгоритма, более информативна, чем неструктурированный набор кластеров, возвращаемых плоской кластеризацией.
	len(193): Это итеративный алгоритм, который случайным образом классифицирует документы на определенное количество кластеров K. K-средних работает итеративно, присваивая каждую точку данных в пространстве
	len(210): Это статистический метод, основанный на байесовской теореме, с сильным «допущением независимости между признаками». NB вычисляет вероятность отношения документа к конкретному предопределенному классу, с помощью
	len(236): некоторых статистических функций. В результате работы определяется класс документа с наибольшей вероятностью. Данный алгоритм принадлежит группе алгоритмов обучения с учителем - для его использования необходимо наличие обучающих данных.
	len(218): классифицированных требований в отношении количества извлеченных требований, и является одним из самых важных критериев, так как перед приложением стоит цель точно определять тип требаования, к которому он принадлежит.
	len(216): Полнота измеряет процент требований, которые были правильно классифицированы, среди всех требований. Наряду с точностью имеет высокий приоритет, так как важно распознать наибольшее число требований во входных данных.
	len(187): Необходимость наличия обучающих данных для использования алгоритма. Определяет, необходимо ли выполнять поиск, и в дальнейшем применять датасет с вручную классифицированными требованиями.
	len(159): Средства генерации выбирались на основе количества цитирований статей, связанных с данным средством, а также задач, встающих перед рассматриваемым приложением.
	len(354): Является частью системы проектирования БД RADD. Устанавливается модерируемый диалог с дизайнером БД. Информация, полученная в ходе диалога, подвергается синтаксическому и семантическому анализу. Результаты анализа используются в прагматической интерпретации, целью которой является отображение информации, поданной на естественном языке, в EER-диаграмму.
	len(255): CM-Builder использует методы обработки естественного языка для анализа текстов требований к программному обеспечению, написанных на английском языке, и строит интегрированную модель дискурса обработанного текста, представленного в виде семантической сети.
	len(386): В ER-converter используются эвристики, собранные из [4], [5], [6] вместе с эвристиками, предложенными самими авторами. Также используются веса эвристик, которые присваиваются им в соответствии с уровнем уверенности в том, что событие есть истина. Для разрешения спорной ситуации, когда существительное может являться сущностью или атрибутом, используется взаимодействие с пользователем.
	len(798): В результате обзора аналогов было выявлено, что наилучшие результаты по точности и полноте среди алгоритмов для классификации требований показывают наивный байесовский классификатор и скрытое распределение Дирихле. Так точность и полнота являются основными критериями, принято решение использовать более точный байесовский классификатор, несмотря на необходимость использовать обучающие данные. Был осуществлен поиск датасетов, которые можно было бы применить в данном случае для обучения. Датасетов, включающих в себя требования на русском языке, обнаружено не было. Были найдены датасет из PROMISE репозитория [12], а также корпус созданный членами универститета «Конкордия» Монреаль, Канада [13]. Так как данные в них представлены на английском языке, необходимо выполнить их перевод на русский.
	len(536): Среди средств для генерации ERD лучший результат показало средство ER-converter, в котором использовались наработки из других ислледований. Стоит отметить, что большая и основная часть алгоритмов практически идентична для каждого средства. Выполняются морфологический, синтаксический и семантический анализы текста. Для решения данных задач разумно выбрать средство, хорошо показавшее себя на сорвеновании [14], например Stanford parser, или UDPipe. В дальнейшем предполагается основываться на подходах, использовавшихся в ER-converter.
	len(327): На уровне представления предполагается использовать фреймворк Vue.js, который на данный момент является одним из самых популярных front-end фреймворком, с одним из самых высоких рейтингов среди разработчиков [15]. Активное взаимодействие с пользователем будет реализовано за счет гибких и мощных возможностей языка  JavaScript.
	len(417): На стороне сервера используется back-end фреймворк Django, так как он хорошо зарекомендовал себя при создании крупных веб-приложений [16], обладает большим сообществом разработчиков, а также для языка Python, который используется в нем, существует большое количество библиотек для машинного обучения, и других задач, ложащихся на серверную часть приложения. Для обслуживания сервера предполагается использовать Nginx.
	len(280): В качестве базы данных предполагается использовать MongoDB, являющуюся самым популярным NoSQL решением на момент написания статьи [17]. Выбор пал на MongoDB, так как она гибче, чем SQL решения, что потенциально предоставляет больше возможностей при работе с данными и их хранении.
	len(186): В приложении предусмотрена система авторизации, чтобы предоставить пользователям возможность сохранять свои проекты, включающие требования, и возвращаться к работе с ними в любой момент.
	len(296): Генерация ER-диаграммы призвана помочь пользователю убедиться в полноте функциональных требований, предъявляемых к системе, а также может послужить основой базы данных для разрабатываемой системы. За основу взят алгоритм, описанный в [3]. При этом реализуется следующая последовательность работы:
	len(193): Полученный результат позволяет с одной стороны систематизировать и классифицировать требования, с другой стороны упростить формирование ER-диаграммы для хранения данных по заданным требованиям.
	len(335): В результате получена архитектура приложения по генерации формализованных требований к системе. Описаны методы и средства реализации функциональности приложения, использованные при решении аналогичных задач. Будущие исследования и эксперименты позволят приблизиться к решению задачи полной автоматизации создания информационных систем.
------------------- KEYWORDS
Машинное обучение   tensor([0.8575], device='cuda:0')   True
классификация требований   tensor([0.0493], device='cuda:0')   False
извлечение сущностей   tensor([0.9750], device='cuda:0')   True
------------------- PHRASES
требований   0.8824238777160645   False
диаграмм   0.9381200075149536   False
системы   0.6125596761703491   False
естественного языка   0.5462932586669922   False
языка   0.8260746598243713   False
создания веб-приложения   0.9627557396888733   False
данных   0.8205920457839966   False
архитектура веб-приложения   0.5070600509643555   False
