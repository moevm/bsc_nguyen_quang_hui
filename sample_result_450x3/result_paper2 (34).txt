Article name: 
	 Разработка программы создания программных макетов учетных систем
Parts:
	len(551): В работе исследуется возможность автоматизированного создания учётных систем. С этой целью рассматривается применение существующего программного обеспечения – средства проектирования баз данных, коммерческих конструкторов приложений. Описаны их преимущества и ограничения. Существующие аналоги не позволяют решить задачу в полном объёме. Авторами предложено собственное решение создания системы и структуры данных реляционной СУБД на основании модели «сущность-связь», описанной в формате XML. В работе описана архитектура решения и детали реализации.
	len(279): На примере простой предметной области продемонстрированы основные шаги процесса создания системы. Для созданной системы измерены характеристики быстродействия в зависимости от наполнения и структуры данных, указаны обнаруженные «узкие места» и возможные причины их возникновения.
	len(245): В настоящее время широкое распространение получили реляционные СУБД (РСУБД) [1]. На них часто основаны учётные системы – приложения, хранящие, обрабатывающие информацию и отвечающие на запросы конечного пользователя относительно этой информации.
	len(237): Создание учётной системы – трудоемкий процесс, требующий разработки как архитектуры БД, так и интерфейса пользователя; часто – кода клиента и сервера. Многие шаги в процессе разработки повторяются вне зависимости от требований к системе.
	len(321): Существующие сервисы либо решают только часть проблемы (автоматизированное создание только структуры БД), либо дают комплексное решение, часто в формате Software-As-Service, поставляемое на коммерческой основе и не обладающее достаточной расширяемостью (возможностью выполнения произвольного кода на стороне сервера) [2].
	len(153): Цель данной работы - разработка программы для автоматизации процесса создания клиент-серверного web-приложения на основе ER-диаграммы предметной области.
	len(200): Реализация автоматизированного создания кода сервера для работы с БД и клиента для работы с сервером. Приложение должно быть расширяемым, т.е. поддерживать подключение сторонних скриптов бизнес-логики
	len(157): Хотя средств, решающих поставленную задачу в полном объеме не обнаружено, возможно использование существующих программных продуктов для решения части задачи.
	len(170): Существуют средства для работы с ER-моделями и их конвертации в реляционные модели или DDL (Data Description Language). Примеры – веб-приложения ERDPlus [3] и SQLdbm [4].
	len(242): Принцип их работы основан на алгоритме, описанном в [5]. Идея использования – создание ER-модели и применение полученного кода для создания или обновления структуры базы данных. SqlDBM может сгенерировать ER-модель по DDL (реверс-инжиниринг).
	len(291): Другой вариант – MySQL Workbench. В его функциональность, помимо средств администрирования БД (только MySQL), входит создание структуры БД по ER-модели и наоборот. Вместе с возможностью профилирования и отладки SQL-запросов, инструмент может использоваться для макетирования базы данных [6].
	len(178): Данные средства могут автоматизировать создание структуры БД, но не приложения для конечного пользователя, поэтому их использование в контексте рассматриваемой задачи ограничено.
	len(229): Как и рассмотренные приложения, CASE-средство Visual Paradigm можно использовать для моделирования структуры БД. Отличительная особенность – возможность генерации программного кода для JPA или ORM-фреймворка Hibernate (Java) [7].
	len(240): Таким образом, макетируется не только база данных, но и элементы программного кода. Дополнительные ограничения такого подхода определяются ограничениями программ-генераторов – описанное средство создает код только для одного ORM-фреймворка.
	len(291): Непосредственно для создания учётных систем могут использоваться конструкторы приложений; один из примеров – Zoho Creator [2]. Этот инструмент представляет собой сервис для автоматизации потоков данных. Приложения создаются с помощью WYSIWIG-конструктора и средств визуального моделирования.
	len(312): Сервис рассчитан на пользователей, не знакомых с программированием. Предусмотрены возможности для расширения с помощью скриптов на собственном языке, но выполнить произвольный код в приложении невозможно. Кроме того, созданное приложение размещается только на серверах компании Zoho на коммерческих условиях [8].
	len(190): Кроме того, в рамках рассматриваемой задачи многие части системы (например, структура БД, формы) однозначно зависят от модели предметной области. Имеется явная возможность для автоматизации.
	len(154): Интерфейс пользователя - существенная часть системы; автоматизация создания интерфейса (или предоставление готового) уменьшит работу по настройке системы.
	len(177): Альтернатива - развертывание на сервере компании-производителя. Во-первых, это означает тарификацию по планам этой компании, во-вторых - неприемлемо для конфиденциальных данных.
	len(250): Среди рассмотренных аналогов, конструкторы приложений лучше всего подходят для решения задачи. Однако, те не предоставляют достаточного уровня расширяемости (возможности исполнять произольный программный код) и привязаны к серверам производителя [2].
	len(491): На рис.~\ref{img:arch_comp} приведена архитектура разрабатываемой системы.  В ней в качестве базы данных используется PostgreSQL. По производительности RDBMS несильно уступает NoSQL-решениям, на небольших наборах данных разница незаметна [9]. Система разделена на две части: создаваемый макет и создающая программа («генератор»). В качестве языка программирования серверной части выбран Python 3 по причине простоты и компактности [10], а также возможности динамического подключения модулей.
	len(214): На стороне сервера макета используется веб-фреймворк Flask, обеспечивающий доступ к системе через REST API. Для компенсации Global Interpreter Lock система будет запускаться на сервере веб-приложений Gunicorn [11].
	len(371): На стороне сервера используется ORM – для предоставления гибкого API для скриптов бизнес-логики и общего упрощения разработки [12]. Предусмотрена возможность встраивать скрипты бизнес-логики. Скриптам дан доступ к API системы, в частности – доступ к данным таблиц (моделям ORM), возможность прерывать действия пользователя, запрашивать у него данные через экранные формы.
	len(242): На уровне представления использован фреймворк Vue.js [13]. Предусмотрены компоненты для отображения таблиц, представлений, форм; в интерфейс пользователя можно встраивать произвольные страницы и кнопки, запускающие скрипты бизнес-логики [14].
	len(205): Присутствует система контроля полномочий и разделение пользователей по ролям. Каждый пользователь имеет одну или несколько полей, каждая роль имеет свой набор прав доступа к таблицам и компонентам системы.
	len(230): Программа-генератор представляет собой GUI-приложение. Он выполняет настройку системы – редактирование и подключение ER-моделей, управление контролем доступа, настройка интерфейса представления, подключение скриптов бизнес-логики.
	len(151): В случае, если возможностей программы-генератора недостаточно, пользователю предоставляется возможность редактировать исходный код создаваемой системы.
	len(199): Роль пользователя может быть поставлена в соответствие какой-либо сущности ER-модели. В таком случае в базе будет образована необходимая связь, а в профиле пользователя появятся соответствующие поля.
	len(426): Рассмотрим создание программы-менеджера задач. Задачи группируются по спискам; каждая имеет название, дату, описание и может включать в себя несколько подзадач; подзадачи состоят из нескольких пунктов. Каждый пункт имеет статус – завершен или не завершен. К задаче могут присоединяться вложения, добавляться комментарии и назначаться участники. Соответствующая ER-модель в нотации Мартина [15] преставлена на рис.~\ref{img:er}
	len(166): В системе ER-модель хранится в формате XML. В неё добавлена дополнительная информация: тип атрибута, является ли атрибут ключевым, является ли отношение частью ключа.
	len(228): На каждое отношение генерируется одна таблица c соответствующими атрибутами и отношениями. ORM SQLAlchemy позволяет получить доступ к связанным таблицам как к атрибутам модели, что облегчает написание скриптов бизнес-логики [16]
	len(204): В результате генерируется web-приложение, в котором для развертывания использован nginx [17] и Gunicorn. Для компенсации Global Interpreter Lock на стороне Gunicorn используется 9 процессов (workers) [11]
	len(219): Измеряется зависимость времени выполнения запросов от наполнения БД. Важно, что при написании скриптов бизнес-логики имеет значение время выполнения запроса через программный код, при настройке клиента – через REST API.
	len(242): Запросы к одной таблице (в обоих случаях) выполняются за приемлемое время; для 100 000 записей запрос к 1-й странице занимает в среднем (n=5) 14 мс, к 10000-й – 69 мс, причем фильтрация и сортировка по индексированным полям время не ухудшают.
	len(272): Наиболее серьезное снижение производительности наблюдается при запросе на получение одной записи с данными из всех связанных таблиц (рис.~\ref{img:rest_linked}). Решить данную проблему можно, например, установкой ленивой инициализации для нужных случаев на стороне клиента
	len(162): Следует отметить, что в реальном использовании накладные расходы на латентность сети и скорость соединения чаще всего многократно превысят рассмотренные издержки.
	len(269): С помощью фреймворка нагрузочного тестирования веб-приложений Locust [18] проведено измерение максимального числа одновременных запросов к REST API. Сгенерированное web-приложение успешно справилось с одновременной обработкой запросов от 1024 виртуальных пользователей.
	len(191): Возможности применения существующих решений для решения поставленной задачи ограничены; рассмотренные решения либо не предоставляют достаточной расширяемости, либо не решают задачу полностью.
	len(274): Сгенерированное web-приложение показывает хорошую (время отклика менее 1 сек) производительность при заполнении большим (более 50 000 записей) количеством данных, а используемый стек технологий дает возможность одновременной работы с системой как минимум 1000 пользователям.
	len(178): Определённые структуры данных (более 10 000 связанных записей на одну) могут обрабатываться системой неэффективно. В этом случае необходимо вмешательство со стороны программиста.
	len(212): В отличие от рассмотренных аналогов, данная система может быть развернута на собственном сервере; расширяемость обеспечивается возможностью выполнения на стороне сервера произвольного кода скриптов бизнес-логики.
	len(324): В дальнейшей работе, может быть полезно ввести дополнительные шаги в проектирование структуры БД, таких как установка индексов и ограничений. Отдельного рассмотрения заслуживают вопросы настройки уровня отображения (клиента). В совокупности эти пункты позволят сократить объем вмешательства в исходный код созданной системы.
------------------- KEYWORDS
генерация программного кода   tensor([0.9976], device='cuda:0')   True
модель «сущность-связь»   tensor([0.9994], device='cuda:0')   True
программный макет   tensor([0.9995], device='cuda:0')   True
------------------- PHRASES
учётных систем   0.8544130921363831   False
систем   0.567320704460144   False
средства проектирования   0.8221726417541504   False
баз данных   0.840935230255127   False
коммерческих конструкторов   0.5396788120269775   False
конструкторов приложений   0.6110491156578064   False
приложений   0.6170608401298523   False
структуры данных   0.9042184352874756   False
архитектура решения   0.6812021136283875   False
пользователя   0.582081139087677   False
интерфейса пользователя   0.9246551990509033   False
собственном сервере   0.6334367394447327   False
рассмотрения   0.8156630992889404   False
совокупности   0.9094969630241394   False
объем вмешательства   0.7057780027389526   False
